{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\fullstack\\\\Front-end\\\\ReactPractice\\\\nextjsBigProject\\\\pages\\\\[meetupId]\\\\index.js\",\n    _this = this;\n\nimport MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\nimport { Fragment } from \"react\";\n\nvar MeetUp = function MeetUp(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Add Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Add your own meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n      image: props.image,\n      title: props.title,\n      address: props.address,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MeetUp;\nexport var __N_SSG = true;\nexport default MeetUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetUp\");","map":{"version":3,"sources":["D:/fullstack/Front-end/ReactPractice/nextjsBigProject/pages/[meetupId]/index.js"],"names":["MeetUpDetail","Fragment","MeetUp","props","image","title","address","description"],"mappings":";;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AAEA,SAASC,QAAT,QAAyB,OAAzB;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACxB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,MAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,MAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,aALF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAfD;;KAAML,M;;AAyDN,eAAeA,MAAf","sourcesContent":["import MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport { Fragment } from \"react\";\r\nconst MeetUp = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>Add Meetups</title>\r\n        <meta name=\"description\" content=\"Add your own meetups\" />\r\n      </Head>\r\n      <MeetUpDetail\r\n        image={props.image}\r\n        title={props.title}\r\n        address={props.address}\r\n        description={props.description}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\nexport async function getStaticPaths() {\r\n  //from API or file system\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  //collection is just like table and document is like single row\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //it will return all the documents from collection\r\n  //it tell that we want all collections but only Id field\r\n  client.close();\r\n  return {\r\n    fallback: false, //false means all params are present //true means not all params present\r\n    paths: meetups.map((meet) => ({\r\n      params: {\r\n        meetupId: meet._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  //from API or file system\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  //collection is just like table and document is like single row\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      id: meetup._id.toString(),\r\n      image: meetup.image,\r\n      title: meetup.title,\r\n      address: meetup.address,\r\n      description: meetup.description,\r\n    },\r\n  };\r\n}\r\nexport default MeetUp;\r\n"]},"metadata":{},"sourceType":"module"}