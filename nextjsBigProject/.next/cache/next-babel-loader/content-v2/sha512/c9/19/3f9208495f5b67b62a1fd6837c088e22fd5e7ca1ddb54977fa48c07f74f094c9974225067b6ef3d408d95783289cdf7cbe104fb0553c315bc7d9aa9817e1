{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\fullstack\\\\Front-end\\\\ReactPractice\\\\nextjsBigProject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetUp = props => {\n  return /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n    image: props.image,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  //from API or file system\n  const client = await MongoClient.connect(\"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db(); //collection is just like table and document is like single row\n\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //it will return all the documents from collection\n  //it tell that we want all collections but only Id field\n\n  client.close();\n  return {\n    fallback: false,\n    //false means all params are present //true means not all params present\n    paths: meetups.map(meet => ({\n      params: {\n        meetupId: meet._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      id: meetupId,\n      image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\n      title: \"First MeetUp\",\n      address: \"Some Street, Some City\",\n      description: \"This is First MeetUp\"\n    }\n  };\n}\nexport default MeetUp;","map":{"version":3,"sources":["D:/fullstack/Front-end/ReactPractice/nextjsBigProject/pages/[meetupId]/index.js"],"names":["MeetUpDetail","MongoClient","MeetUp","props","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meet","params","meetupId","toString","getStaticProps","context","console","log","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,IAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAUA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,0GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CALqC,CAMrC;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CARqC,CAQmC;AACxE;;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,IAAD,KAAW;AAC5BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADJ;AADoB,KAAX,CAAZ;AAFF,GAAP;AAQD;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,SAAO;AACLrB,IAAAA,KAAK,EAAE;AACL2B,MAAAA,EAAE,EAAEN,QADC;AAELpB,MAAAA,KAAK,EAAE,8DAFF;AAGLC,MAAAA,KAAK,EAAE,cAHF;AAILC,MAAAA,OAAO,EAAE,wBAJJ;AAKLC,MAAAA,WAAW,EAAE;AALR;AADF,GAAP;AASD;AACD,eAAeL,MAAf","sourcesContent":["import MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\r\nimport { MongoClient } from \"mongodb\";\r\nconst MeetUp = (props) => {\r\n  return (\r\n    <MeetUpDetail\r\n      image={props.image}\r\n      title={props.title}\r\n      address={props.address}\r\n      description={props.description}\r\n    />\r\n  );\r\n};\r\nexport async function getStaticPaths() {\r\n  //from API or file system\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  //collection is just like table and document is like single row\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //it will return all the documents from collection\r\n  //it tell that we want all collections but only Id field\r\n  client.close();\r\n  return {\r\n    fallback: false, //false means all params are present //true means not all params present\r\n    paths: meetups.map((meet) => ({\r\n      params: {\r\n        meetupId: meet._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  console.log(meetupId);\r\n  return {\r\n    props: {\r\n      id: meetupId,\r\n      image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\r\n      title: \"First MeetUp\",\r\n      address: \"Some Street, Some City\",\r\n      description: \"This is First MeetUp\",\r\n    },\r\n  };\r\n}\r\nexport default MeetUp;\r\n"]},"metadata":{},"sourceType":"module"}