{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\fullstack\\\\Front-end\\\\ReactPractice\\\\nextjsBigProject\\\\pages\\\\index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\"; // if we use import which we use in getstaticprops or path or serversideprops then it will not the part for client side bundle\n\nconst Dummy_data = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\n  address: \"Some address 5, 12345 smart city\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\n  address: \"Some address 10, 12345 smart city\"\n}];\n\nconst Homepage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n}; //we will use this function only with pages and it used for static data generation for\n//pre-rendering process\n//it will run for every request\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: Dummy_data,\n//     },\n//   };\n// }\n//it will fetch data during build time\n//and re validate the page after some time\n\n\nexport async function getStaticProps() {\n  //from API or file system\n  const client = await MongoClient.connect(\"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db(); //collection is just like table and document is like single row\n\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = meetupsCollection.find().toArray(); //it will return all the documents from collection\n\n  return {\n    props: {\n      meetups: meetups.map(meet => ({\n        title: meet.title,\n        address: meet.address,\n        image: meet.image,\n        id: meet._id.toString()\n      }))\n    },\n    revalidate: 60\n  };\n}\nexport default Homepage;","map":{"version":3,"sources":["D:/fullstack/Front-end/ReactPractice/nextjsBigProject/pages/index.js"],"names":["MeetupList","MongoClient","Dummy_data","id","title","image","address","Homepage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","map","meet","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAAuC;;AACvC,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EAAE,8DAHT;AAIEC,EAAAA,OAAO,EAAE;AAJX,CADiB,EAOjB;AACEH,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EAAE,8DAHT;AAIEC,EAAAA,OAAO,EAAE;AAJX,CAPiB,CAAnB;;AAcA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,0GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CALqC,CAMrC;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMN,OAAO,GAAGK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAhB,CARqC,CAQe;;AACpD,SAAO;AACLT,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACS,GAAR,CAAaC,IAAD,KAAW;AAC9Bf,QAAAA,KAAK,EAAEe,IAAI,CAACf,KADkB;AAE9BE,QAAAA,OAAO,EAAEa,IAAI,CAACb,OAFgB;AAG9BD,QAAAA,KAAK,EAAEc,IAAI,CAACd,KAHkB;AAI9BF,QAAAA,EAAE,EAAEgB,IAAI,CAACC,GAAL,CAASC,QAAT;AAJ0B,OAAX,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD;AACD,eAAef,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\nimport { MongoClient } from \"mongodb\"; // if we use import which we use in getstaticprops or path or serversideprops then it will not the part for client side bundle\r\nconst Dummy_data = [\r\n  {\r\n    id: \"m1\",\r\n    title: \"A First Meetup\",\r\n    image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\r\n    address: \"Some address 5, 12345 smart city\",\r\n  },\r\n  {\r\n    id: \"m2\",\r\n    title: \"A Second Meetup\",\r\n    image: \"https://cdn.britannica.com/93/94493-050-35524FED/Toronto.jpg\",\r\n    address: \"Some address 10, 12345 smart city\",\r\n  },\r\n];\r\nconst Homepage = (props) => {\r\n  return <MeetupList meetups={props.meetups} />;\r\n};\r\n//we will use this function only with pages and it used for static data generation for\r\n//pre-rendering process\r\n//it will run for every request\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n//   return {\r\n//     props: {\r\n//       meetups: Dummy_data,\r\n//     },\r\n//   };\r\n// }\r\n//it will fetch data during build time\r\n//and re validate the page after some time\r\nexport async function getStaticProps() {\r\n  //from API or file system\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Sagar_1997:sagar123@cluster0.rblqo.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  //collection is just like table and document is like single row\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = meetupsCollection.find().toArray(); //it will return all the documents from collection\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meet) => ({\r\n        title: meet.title,\r\n        address: meet.address,\r\n        image: meet.image,\r\n        id: meet._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 60,\r\n  };\r\n}\r\nexport default Homepage;\r\n"]},"metadata":{},"sourceType":"module"}